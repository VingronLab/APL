% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apl.R
\name{apl_score_rand}
\alias{apl_score_rand}
\title{Find rows most highly associated with a condition through random APLs.}
\usage{
apl_score_rand(
  caobj,
  dims = caobj@dims,
  reps = 300,
  quant = 0.99,
  python = TRUE,
  store_perm = TRUE
)
}
\arguments{
\item{caobj}{A "cacomp" object with principal row coordinates and standard column coordinates calculated.}

\item{dims}{Integer. Number of CA dimensions to retain. Needs to be the same as in caobj!}

\item{reps}{Integer. Number of permutations to perform. Default = 10.}

\item{quant}{Numeric. Single number between 0 and 1 indicating the quantile used to calculate the cutoff. Default 0.99.}

\item{python}{A logical value indicating whether to use singular-value decomposition from the python package torch.}

\item{store_perm}{Logical. Whether calculated cutoff should be stored. Default TRUE.
This implementation dramatically speeds up computation compared to `svd()` in R.}
}
\value{
Returns the input "cacomp" object with "APL_score" component added.
APL_score contains a data frame with ranked rows, their score and their original row number.
}
\description{
Ranks rows by a calculated score which balances the association of the row with the condition and how associated it is with other conditions.
}
\details{
The score is calculated by choosing random directions in space to calculate APLs for the rows.
\deqn{S_{alpha}(x,y)=x-\frac{y}{\tan\alpha}}
By default the permutation is repeated 300 times, and is independent of group size, so the same cutoff is applicable to all groups.
If store_perm is TRUE the calculated cutoff is stored as an attribute to ca$permuted_data to prevent recalculation when running with identical parameters.
}
\examples{

#' set.seed(1234)

# Simulate counts
cnts <- mapply(function(x){rpois(n = 500, lambda = x)}, x = sample(1:20, 50, replace = TRUE))
rownames(cnts) <- paste0("gene_", 1:nrow(cnts))
colnames(cnts) <- paste0("cell_", 1:ncol(cnts))

# Run correspondence analysis.
ca <- cacomp(obj = cnts, princ_coords = 3)

# Calculate APL coordinates:
ca <- apl_coords(ca, group = 1:10)

# Rank genes by S-alpha score
ca <- apl_score_rand(ca)
}
